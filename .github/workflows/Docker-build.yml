name: "Docker: springboot"
on:
  push:
    branches:
      - '*'

jobs:
  build_and_publish:
    name: Push Docker image to ECR
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build and push Docker image
      env:
        COMMIT_HASH: ${{ github.sha }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 244530008913.dkr.ecr.eu-west-1.amazonaws.com
          rev=$(git rev-parse --short HEAD)
          docker build . -t ppt
          docker tag ppt 244530008913.dkr.ecr.eu-west-1.amazonaws.com/2027-ecr-sensur:$rev
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag ppt 244530008913.dkr.ecr.eu-west-1.amazonaws.com/2027-ecr-sensur:latest
            docker push 244530008913.dkr.ecr.eu-west-1.amazonaws.com/2027-ecr-sensur:latest
            docker push 244530008913.dkr.ecr.eu-west-1.amazonaws.com/2027-ecr-sensur:$rev
          fi
  terraform:
    name: "terraform"
    needs: build_and_publish
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-west-1
      IMAGE: 244530008913.dkr.ecr.eu-west-1.amazonaws.com/2027-ecr-sensur:latest
      PREFIX: linrob16s
      iam_role: candidate-2027s-role
      iam_policy: candidate-2027s-policy
    steps:
      - uses: actions/checkout@v3
   
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan   -var="instance_name=$PREFIX" -var="image_identifier=$IMAGE" -var="iam_role=$iam_role" -var="iam_policy=$iam_policy"  -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -var="instance_name=$PREFIX" -var="image_identifier=$IMAGE" -var="iam_role=$iam_role" -var="iam_policy=$iam_policy"  -auto-approve
